//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryMaragementClient.RoleServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RoleServiceReference.IRoleService")]
    public interface IRoleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/Add", ReplyAction="http://tempuri.org/IRoleService/AddResponse")]
        int Add(DatabaseAccess.DataTransferObjects.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/Add", ReplyAction="http://tempuri.org/IRoleService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(DatabaseAccess.DataTransferObjects.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/Delete", ReplyAction="http://tempuri.org/IRoleService/DeleteResponse")]
        int Delete(int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/Delete", ReplyAction="http://tempuri.org/IRoleService/DeleteResponse")]
        System.Threading.Tasks.Task<int> DeleteAsync(int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetAll", ReplyAction="http://tempuri.org/IRoleService/GetAllResponse")]
        System.Data.DataTable GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetAll", ReplyAction="http://tempuri.org/IRoleService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/Update", ReplyAction="http://tempuri.org/IRoleService/UpdateResponse")]
        int Update(DatabaseAccess.DataTransferObjects.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/Update", ReplyAction="http://tempuri.org/IRoleService/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(DatabaseAccess.DataTransferObjects.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetRoles", ReplyAction="http://tempuri.org/IRoleService/GetRolesResponse")]
        DatabaseAccess.DataTransferObjects.Role[] GetRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetRoles", ReplyAction="http://tempuri.org/IRoleService/GetRolesResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataTransferObjects.Role[]> GetRolesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoleServiceChannel : LibraryMaragementClient.RoleServiceReference.IRoleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoleServiceClient : System.ServiceModel.ClientBase<LibraryMaragementClient.RoleServiceReference.IRoleService>, LibraryMaragementClient.RoleServiceReference.IRoleService {
        
        public RoleServiceClient() {
        }
        
        public RoleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(DatabaseAccess.DataTransferObjects.Role role) {
            return base.Channel.Add(role);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(DatabaseAccess.DataTransferObjects.Role role) {
            return base.Channel.AddAsync(role);
        }
        
        public int Delete(int roleId) {
            return base.Channel.Delete(roleId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteAsync(int roleId) {
            return base.Channel.DeleteAsync(roleId);
        }
        
        public System.Data.DataTable GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public int Update(DatabaseAccess.DataTransferObjects.Role role) {
            return base.Channel.Update(role);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(DatabaseAccess.DataTransferObjects.Role role) {
            return base.Channel.UpdateAsync(role);
        }
        
        public DatabaseAccess.DataTransferObjects.Role[] GetRoles() {
            return base.Channel.GetRoles();
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataTransferObjects.Role[]> GetRolesAsync() {
            return base.Channel.GetRolesAsync();
        }
    }
}
