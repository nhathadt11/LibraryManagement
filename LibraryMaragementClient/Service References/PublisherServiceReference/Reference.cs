//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryMaragementClient.PublisherServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PublisherServiceReference.IPublisherService")]
    public interface IPublisherService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisherService/Add", ReplyAction="http://tempuri.org/IPublisherService/AddResponse")]
        int Add(DatabaseAccess.DataTransferObjects.Publisher publisher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisherService/Add", ReplyAction="http://tempuri.org/IPublisherService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(DatabaseAccess.DataTransferObjects.Publisher publisher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisherService/Delete", ReplyAction="http://tempuri.org/IPublisherService/DeleteResponse")]
        int Delete(int publisherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisherService/Delete", ReplyAction="http://tempuri.org/IPublisherService/DeleteResponse")]
        System.Threading.Tasks.Task<int> DeleteAsync(int publisherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisherService/GetAll", ReplyAction="http://tempuri.org/IPublisherService/GetAllResponse")]
        System.Data.DataTable GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisherService/GetAll", ReplyAction="http://tempuri.org/IPublisherService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisherService/Update", ReplyAction="http://tempuri.org/IPublisherService/UpdateResponse")]
        int Update(DatabaseAccess.DataTransferObjects.Publisher publisher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisherService/Update", ReplyAction="http://tempuri.org/IPublisherService/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(DatabaseAccess.DataTransferObjects.Publisher publisher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisherService/GetPublishers", ReplyAction="http://tempuri.org/IPublisherService/GetPublishersResponse")]
        System.Collections.Generic.List<DatabaseAccess.DataTransferObjects.Publisher> GetPublishers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisherService/GetPublishers", ReplyAction="http://tempuri.org/IPublisherService/GetPublishersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DatabaseAccess.DataTransferObjects.Publisher>> GetPublishersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPublisherServiceChannel : LibraryMaragementClient.PublisherServiceReference.IPublisherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublisherServiceClient : System.ServiceModel.ClientBase<LibraryMaragementClient.PublisherServiceReference.IPublisherService>, LibraryMaragementClient.PublisherServiceReference.IPublisherService {
        
        public PublisherServiceClient() {
        }
        
        public PublisherServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PublisherServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PublisherServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PublisherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(DatabaseAccess.DataTransferObjects.Publisher publisher) {
            return base.Channel.Add(publisher);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(DatabaseAccess.DataTransferObjects.Publisher publisher) {
            return base.Channel.AddAsync(publisher);
        }
        
        public int Delete(int publisherId) {
            return base.Channel.Delete(publisherId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteAsync(int publisherId) {
            return base.Channel.DeleteAsync(publisherId);
        }
        
        public System.Data.DataTable GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public int Update(DatabaseAccess.DataTransferObjects.Publisher publisher) {
            return base.Channel.Update(publisher);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(DatabaseAccess.DataTransferObjects.Publisher publisher) {
            return base.Channel.UpdateAsync(publisher);
        }
        
        public System.Collections.Generic.List<DatabaseAccess.DataTransferObjects.Publisher> GetPublishers() {
            return base.Channel.GetPublishers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DatabaseAccess.DataTransferObjects.Publisher>> GetPublishersAsync() {
            return base.Channel.GetPublishersAsync();
        }
    }
}
