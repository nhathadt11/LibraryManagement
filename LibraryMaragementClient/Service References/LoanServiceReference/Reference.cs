//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryMaragementClient.LoanServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoanServiceReference.ILoanService")]
    public interface ILoanService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/Delete", ReplyAction="http://tempuri.org/ILoanService/DeleteResponse")]
        int Delete(int loanId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/Delete", ReplyAction="http://tempuri.org/ILoanService/DeleteResponse")]
        System.Threading.Tasks.Task<int> DeleteAsync(int loanId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/GetAll", ReplyAction="http://tempuri.org/ILoanService/GetAllResponse")]
        System.Data.DataTable GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/GetAll", ReplyAction="http://tempuri.org/ILoanService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/Update", ReplyAction="http://tempuri.org/ILoanService/UpdateResponse")]
        int Update(DatabaseAccess.DataTransferObjects.Loan loan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/Update", ReplyAction="http://tempuri.org/ILoanService/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(DatabaseAccess.DataTransferObjects.Loan loan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/Add", ReplyAction="http://tempuri.org/ILoanService/AddResponse")]
        int Add(DatabaseAccess.DataTransferObjects.Loan loan, DatabaseAccess.DataTransferObjects.LoanDetail[] loanDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/Add", ReplyAction="http://tempuri.org/ILoanService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(DatabaseAccess.DataTransferObjects.Loan loan, DatabaseAccess.DataTransferObjects.LoanDetail[] loanDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/GetLoans", ReplyAction="http://tempuri.org/ILoanService/GetLoansResponse")]
        DatabaseAccess.DataTransferObjects.Loan[] GetLoans();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/GetLoans", ReplyAction="http://tempuri.org/ILoanService/GetLoansResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataTransferObjects.Loan[]> GetLoansAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoanServiceChannel : LibraryMaragementClient.LoanServiceReference.ILoanService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoanServiceClient : System.ServiceModel.ClientBase<LibraryMaragementClient.LoanServiceReference.ILoanService>, LibraryMaragementClient.LoanServiceReference.ILoanService {
        
        public LoanServiceClient() {
        }
        
        public LoanServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoanServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoanServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoanServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Delete(int loanId) {
            return base.Channel.Delete(loanId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteAsync(int loanId) {
            return base.Channel.DeleteAsync(loanId);
        }
        
        public System.Data.DataTable GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public int Update(DatabaseAccess.DataTransferObjects.Loan loan) {
            return base.Channel.Update(loan);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(DatabaseAccess.DataTransferObjects.Loan loan) {
            return base.Channel.UpdateAsync(loan);
        }
        
        public int Add(DatabaseAccess.DataTransferObjects.Loan loan, DatabaseAccess.DataTransferObjects.LoanDetail[] loanDetails) {
            return base.Channel.Add(loan, loanDetails);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(DatabaseAccess.DataTransferObjects.Loan loan, DatabaseAccess.DataTransferObjects.LoanDetail[] loanDetails) {
            return base.Channel.AddAsync(loan, loanDetails);
        }
        
        public DatabaseAccess.DataTransferObjects.Loan[] GetLoans() {
            return base.Channel.GetLoans();
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataTransferObjects.Loan[]> GetLoansAsync() {
            return base.Channel.GetLoansAsync();
        }
    }
}
